
class Order():
    def __init__(self, lines, start_line, ship_quantity, can_ship_weekday):
        self.query_type, self.date = lines[start_line].split()
        self.order_number, self.ship_date, self.product_type_quantity =  lines[start_line+1].split()
        self.product_type_quantity = int(self.product_type_quantity)
        self.orders = {}
        self.error = False
        self.ship_quantity = ship_quantity
        self.init_ship_quantity = ship_quantity
        self.can_ship_weekday = can_ship_weekday

        self.check_can_ship(self.ship_date)
        self.check_ship_quantity(self.ship_date)

        for line in lines[start_line+2:start_line+2+self.product_type_quantity]:
            self.name, self.quantity = line.split()
            self.quantity = int(self.quantity)
            self.orders[self.name]  = self.quantity

            dates[self.ship_date][self.name] += self.quantity
            if dates[self.ship_date][self.name] > self.ship_quantity:
                self.error = True
    
        if self.error:
            self.canceled()
            print(f"{self.date} Ordered {self.order_number} Error: the number of available shipments has been exceeded.")
        else:
            print(f"{self.date} Ordered {self.order_number}")
    
    def get_order_number(self):
        return self.order_number
    
    def get_ship_date(self):
        return self.ship_date
    
    def get_error(self):
        return self.error
    
    def set_error(self,error):
        self.error = error
    
    def change(self, date, changed_date, order_number):
        self.check_can_ship(changed_date)
        self.check_ship_quantity(changed_date)
        for name, quantity in self.orders.items():
            dates[changed_date][name] += quantity
            if dates[changed_date][name] > self.ship_quantity:
                self.error = True
        if self.error:
            for name, quantity in self.orders.items():
                if name in dates[changed_date]:
                    dates[changed_date][name] -= quantity
            self.error = False
            self.check_ship_quantity(self.ship_date)
            print(f"{date} Changed {order_number} Error: the number of available shipments has been exceeded.")
        else:
            self.canceled()
            self.ship_date = changed_date
            print(f"{date} Changed {order_number}")

    def canceled(self):
        for name, quantity in self.orders.items():
                if name in dates[self.ship_date]:
                    dates[self.ship_date][name] -= quantity
    
    def check_can_ship(self, date):
        self.ship_weekday = (datetime.strptime(date, "%Y-%m-%d").date().weekday() + 1) % 7
        self.can_ship_weekday_int = [int(x) for x in self.can_ship_weekday.split() if x.strip() != '']
        if self.can_ship_weekday_int[self.ship_weekday] == 0:
            self.error = True
     
    def check_ship_quantity(self, date):
        self.ship_quantity = self.init_ship_quantity
        for date_tuple in expand_date_list:
            if date_tuple[0] == date:
                if self.error:
                    self.ship_quantity = date_tuple[1] - self.ship_quantity
                    self.error = False
                else:
                     self.ship_quantity = date_tuple[1]
                break
            

def cancel(lines, orders,start_line):
    query_type, date = lines[start_line].split()
    order_number = lines[start_line+1]
    for order in orders:
        if order.get_order_number() == order_number:
            order.set_error(True)
            order.canceled()
            print(f"{date} Canceled {order_number}")

def ship(lines, orders, start_line):
    query_type, date = lines[start_line].split()
    ship_orders = []
    for order in orders:
        if order.get_ship_date().split("T")[0] == date.split("T")[0]  and order.get_error() == False:
            ship_orders.append(order.get_order_number())
    print(f"{date} Shipped {len(ship_orders)} Orders")
    print(" ".join(sorted(ship_orders)))

def change(lines, orders, start_line):
    query_type, date = lines[start_line].split()
    order_number, changed_date = lines[start_line+1].split()
    for order in orders:
        if order.get_order_number() == order_number:
            order.change(date, changed_date, order_number)

def expand(lines, orders, ship_quantity, start_line):
    global expand_date_list
    query_type, date_str = lines[start_line].split()
    first_date_str, last_date_str, increased_quantity_str = lines[start_line+1].split()
    first_date = datetime.strptime(first_date_str, "%Y-%m-%d")
    last_date = datetime.strptime(last_date_str, "%Y-%m-%d")
    increased_quantity = int(increased_quantity_str)
    new_expand_date_list = []
    existing_dates = set() 

    for date_tuple in expand_date_list:
        existing_dates.add(date_tuple[0])
        new_expand_date_list.append(date_tuple)

    current_date = first_date
    while current_date <= last_date:
        current_date_str = current_date.strftime("%Y-%m-%d")
        calculated_quantity = increased_quantity + ship_quantity
        found = False
        for i in range(len(new_expand_date_list)):
            if new_expand_date_list[i][0] == current_date_str:
                new_expand_date_list[i] = (current_date_str, new_expand_date_list[i][1] + calculated_quantity)
                found = True
                break
        
        if not found:
            new_expand_date_list.append((current_date_str, calculated_quantity))

        current_date += timedelta(days=1)
        
    expand_date_list = new_expand_date_list
    print(f"{date_str} Expanded")



def main(lines):
    # このコードは標準入力と標準出力を用いたサンプルコードです。
    # このコードは好きなように編集・削除してもらって構いません。
    '''
    for i, v in enumerate(lines):
        print("line[{0}]: {1}".format(i, v))
    '''
    product_type, ship_quantity, max_difference = map(int, lines[0].split())
    products = lines[1]
    can_ship_weekday = lines[2]
    query_quantity = lines[3]
    orders = []

    for i, v in enumerate(lines[4:]):
        if "ORDER" in v:
            order = Order(lines,i+4, ship_quantity, can_ship_weekday)
            orders.append(order)
        
        elif "CANCEL" in v:
            cancel(lines, orders, i+4)
        
        elif "SHIP" in v:
            ship(lines, orders, i+4)
        
        elif "CHANGE" in v:
            change(lines, orders, i+4)
        
        elif "EXPAND" in v:
            expand(lines, orders, ship_quantity, i+4)

    
    #print(dates)
    
    



if __name__ == '__main__':
    lines = []
    for l in sys.stdin:
        lines.append(l.rstrip('\r\n'))
    main(lines)



    


